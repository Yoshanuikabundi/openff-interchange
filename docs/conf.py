# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/stable/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

# Incase the project was not installed
import os
import sys
from pathlib import Path

sys.path.insert(0, os.path.abspath(".."))


# -- Project information -----------------------------------------------------

project = "openff-interchange"
copyright = (
    "2020, Open Force Field Initiative. Project structure based on the "
    "Computational Molecular Science Python Cookiecutter version 1.2"
)
author = "Open Force Field Initiative"

# The short X.Y version
version = ""
# The full version, including alpha/beta/rc tags
release = ""


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "myst_parser",
    "sphinx.ext.mathjax",
    "sphinx.ext.napoleon",
    "sphinx.ext.intersphinx",
    "sphinx.ext.extlinks",
]

extensions.append("autoapi.extension")
autoapi_type = "python"
autoapi_dirs = ["../openff"]
autoapi_template_dir = "_templates/autoapi"
autoapi_generate_api_docs = True
autoapi_root = "autoapi"
autoapi_keep_files = True
autoapi_add_toctree_entry = False
autoapi_python_use_implicit_namespaces = True
suppress_warnings = ["autoapi.python_import_resolution"]
# autoapi_ignore = ["_version.py", "mdtraj.py"]
autoapi_options = [
    "members",  # Display children of an object
    "inherited-members",  # Display children of an object that have been inherited from a base class.
    "undoc-members",  # Display objects that have no docstring
    # "private-members",  # Display private objects (eg. _foo in Python)
    "special-members",  # Display special objects (eg. __foo__ in Python)
    "show-inheritance",  # Display a list of base classes below the class signature.
    # "show-inheritance-diagram",  # Display an inheritance diagram in generated class documentation. Requires Graphviz to be installed.
    "show-module-summary",  # Whether to include autosummary directives in generated module documentation.
    "imported-members",  # Display objects imported from the same top level package or module.
]


def autoapi_prepare_jinja_env(jinja_env):
    jinja_env.filters[
        "is_top_level"
    ] = lambda obj: obj.name == "openff.interchange" or getattr(
        obj, "top_level_object", False
    )


extensions.append("sphinx.ext.linkcode")


def linkcode_resolve(domain, info):
    """Have source links point to GitHub"""
    if domain != "py":
        return None
    if not info["module"]:
        return None

    filename = Path(info["module"].replace(".", "/"))
    if filename.is_dir():
        filename = filename / "__init__.py"
    else:
        filename = filename.with_suffix(".py")

    obj_name = info["fullname"]

    line_number = None
    with open(filename, "r") as f:
        for i, line in enumerate(f, start=1):
            line, _, _ = line.partition("#")
            try:
                (maybe_kwd, maybe_name, *_) = line.split()
            except ValueError:
                continue
            maybe_name, _, _ = maybe_name.partition("(")
            maybe_name, _, _ = maybe_name.partition(":")
            if (maybe_kwd == "def" or maybe_kwd == "class") and maybe_name == obj_name:
                line_number = i
                continue

            maybe_name, eq, _ = line.partition("=")
            if eq:
                maybe_name, _, _ = maybe_name.partition(":")
                if maybe_name.strip() == obj_name:
                    line_number = i
                    continue

    if line_number is None:
        return None
    else:
        line_number = f"#L{line_number}"

    git_ref = "master"
    return f"https://github.com/openforcefield/openff-interchange/blob/{git_ref}/{filename}{line_number}"


# autosummary_generate = True
napoleon_google_docstring = False
napoleon_use_param = False
napoleon_use_ivar = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "default"


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "interchangedoc"


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "interchange.tex",
        "openff-interchange Documentation",
        "interchange",
        "manual",
    ),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, "interchange", "openff-interchange Documentation", [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "interchange",
        "openff-interchange Documentation",
        author,
        "interchange",
        "A molecular interchange object from the Open Force Field Initiative",
        "Miscellaneous",
    ),
]


# -- Extension configuration -------------------------------------------------
